{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getUser","userId","fetch","then","promise","json","TodoList","state","query","todos","filterTodos","setState","changeUser","this","props","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","name","id","map","classNames","htmlFor","readOnly","checked","onClick","React","Component","CurrentUser","user","selectedUserId","prevProps","clearSelectedUser","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.feb7bdf1.chunk.js","sourcesContent":["const apiURL = 'https://mate.academy/students-api/todos';\nconst apiUsersURL = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(apiURL)\n    .then(promise => promise.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${apiUsersURL}${userId}`)\n    .then(promise => promise.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  changeUser(userId: number): void;\n};\n\ntype State = {\n  query: string;\n  todos: Todo[];\n  filterTodos: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    todos: [],\n    filterTodos: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  render() {\n    const { changeUser } = this.props;\n    const { query, todos } = this.state;\n\n    let filteredTodos = todos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n    if (this.state.filterTodos === 'completed') {\n      filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n    }\n\n    if (this.state.filterTodos === 'not completed') {\n      filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n\n          <input\n            className=\"TodoList__input input is-info\"\n            type=\"text\"\n            placeholder=\"Filter todos\"\n            value={query}\n            onChange={(event) => (\n              this.setState({ query: event.target.value })\n            )}\n          />\n\n          <select\n            className=\"TodoList__select select\"\n            name=\"filter\"\n            id=\"filter\"\n            onChange={(event) => (\n              this.setState({ filterTodos: event.target.value })\n            )}\n          >\n            <option value=\"all\">\n              Show all todos\n            </option>\n            <option value=\"completed\">\n              Show completed todos\n            </option>\n            <option value=\"not completed\">\n              Show active todos\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label\n                  htmlFor=\"user-button\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  name=\"user-button\"\n                  onClick={() => (\n                    changeUser(todo.userId)\n                  )}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number;\n  clearSelectedUser: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    getUser(this.props.selectedUserId)\n      .then(user => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { selectedUserId } = this.props;\n\n    if (prevProps.selectedUserId !== selectedUserId) {\n      getUser(selectedUserId)\n        .then(user => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {` ${user?.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user?.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user?.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user?.phone}\n        </p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => clearSelectedUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  changeUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            changeUser={this.changeUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}